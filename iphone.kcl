@settings(defaultLengthUnit = mm)
// iPhone 16 Pro 3D model
// For technical specifications, see page 296-299
// https://developer.apple.com/accessories/Accessory-Design-Guidelines.pdf

// XYZ Reference Lines
// Comment out before exporting solid
// xBaseLine = startSketchOn(offsetPlane('XY', offset = 0))
// |> startProfileAt([0, 0], %)
// |> xLine(100, %)
// yBaseLine = startSketchOn(offsetPlane('XY', offset = 0))
// |> startProfileAt([0, 0], %)
// |> yLine(100, %)
// zBaseLine = startSketchOn(offsetPlane('XZ', offset = 0))
// |> startProfileAt([0, 0], %)
// |> yLine(100, %)

cornerCurveRadius = 19.23
totalWidth = 71.45
widthWithoutCurve = totalWidth - (cornerCurveRadius * 2)

totalLength = 149.61
bodyLength = -totalLength + cornerCurveRadius * 2
lengthWithoutCurve = totalLength - (cornerCurveRadius * 2)

edgeCurveHeight = 2.28
totalThickness = 8.25
bodyThickness = totalThickness - (edgeCurveHeight * 2)

edgeCurveWidth = 2.41
widthWithoutEdgeCurve = totalWidth - (edgeCurveWidth * 2)

// 0th and every third point are documented points.
// intermediate points are interpolated
// TODO: migrate python midpoint interpolation to KCL
cornerCurvePoints = [
  [0, 19.23],
  [0.01, 17.41],
  [0.02, 15.58],
  [0.04, 13.75],
  [0.17, 11.92],
  [0.43, 10.12],
  [0.89, 8.36],
  [1.6, 6.68],
  [2.56, 5.13],
  [3.74, 3.74],
  [5.13, 2.56],
  [6.68, 1.6],
  [8.36, 0.89],
  [10.12, 0.43],
  [11.92, 0.17],
  [13.75, 0.04],
  [15.58, 0.02],
  [17.41, 0.01],
  [19.23, 0]
]

// offset returns the relative difference between two points in a list
fn offsetFunc(pts, startIndex, endIndex) {
  r0 = pts[startIndex]
  xx0 = r0[0]
  yy0 = r0[1]
  r1 = pts[endIndex]
  xx1 = r1[0]
  yy1 = r1[1]
  return [xx1 - xx0, yy1 - yy0]
}

// rotatedOffset returns the relative difference between two points in a list, rotated 90 degrees
fn rotatedOffset90Func(pts, startIndex, endIndex) {
  offsetRes = offsetFunc(pts, startIndex, endIndex)
  return [-offsetRes[1], offsetRes[0]]
}

// rotatedOffset180 returns the relative difference between two points in a list, rotated 180 degrees
fn rotatedOffset180Func(pts, startIndex, endIndex) {
  offsetRes = offsetFunc(pts, startIndex, endIndex)
  return [-offsetRes[0], -offsetRes[1]]
}

// rotatedOffset270 returns the relative difference between two points in a list, rotated 270 degrees
fn rotatedOffset270Func(pts, startIndex, endIndex) {
  offsetRes = offsetFunc(pts, startIndex, endIndex)
  return [offsetRes[1], -offsetRes[0]]
}

fn rotatePoints90(pts) {
  return map(pts, fn(pt) {
    return [-pt[1], pt[0]]
  })
}
fn rotatePoints180(pts) {
  return map(pts, fn(pt) {
    return [-pt[0], -pt[1]]
  })
}

fn rotatePoints270(pts) {
  return map(pts, fn(pt) {
    return [pt[1], -pt[0]]
  })
}

// cornerBezierCurves returns siz corner bezier curves
fn cornerBezierCurves(pts, offsetFunc, z) {
  return bezierCurve({
         to = offsetFunc(pts, 0, 3),
         control1 = offsetFunc(pts, 0, 1),
         control2 = offsetFunc(pts, 0, 2)
       }, %)
    |> bezierCurve({
         to = offsetFunc(pts, 3, 6),
         control1 = offsetFunc(pts, 3, 4),
         control2 = offsetFunc(pts, 3, 5)
       }, %)
    |> bezierCurve({
         to = offsetFunc(pts, 6, 9),
         control1 = offsetFunc(pts, 6, 7),
         control2 = offsetFunc(pts, 6, 8)
       }, %)
    |> bezierCurve({
         to = offsetFunc(pts, 9, 12),
         control1 = offsetFunc(pts, 9, 10),
         control2 = offsetFunc(pts, 9, 11)
       }, %)
    |> bezierCurve({
         to = offsetFunc(pts, 12, 15),
         control1 = offsetFunc(pts, 12, 13),
         control2 = offsetFunc(pts, 12, 14)
       }, %)
    |> bezierCurve({
         to = offsetFunc(pts, 15, 18),
         control1 = offsetFunc(pts, 15, 16),
         control2 = offsetFunc(pts, 15, 17)
       }, %)
}

edgeToUsbCstart = 30.86
edgeToUsbCend = 40.58
curveToUsbC = edgeToUsbCstart-cornerCurveRadius
usbcWidth = edgeToUsbCend-edgeToUsbCstart
usbCdepth = 6.5

usbcDiameter = 3.14
usbcRadius = usbcDiameter/2
usbcSideLength = usbcWidth-usbcDiameter

// generate iphone body
fn iphoneBody(x, y, z) {
  return startSketchOn(offsetPlane('XY', offset = z))
    |> startProfileAt([x, y], %)
    |> yLine(length=-lengthWithoutCurve)
    |> cornerBezierCurves(cornerCurvePoints, offsetFunc, %)
    |> xLine(length=curveToUsbC)
    |> yLine(length=usbCdepth)
    |> xLine(length=usbcWidth)
    |> yLine(length=-usbCdepth)
    |> xLine(length=curveToUsbC)
    |> cornerBezierCurves(cornerCurvePoints, rotatedOffset90Func, %)
    |> yLine(length=lengthWithoutCurve)
    |> cornerBezierCurves(cornerCurvePoints, rotatedOffset180Func, %)
    |> xLine(length=-widthWithoutCurve)
    |> cornerBezierCurves(cornerCurvePoints, rotatedOffset270Func, %)
    |> close()
    |> extrude(length = bodyThickness)
}

fn usbcHole(x, y, z) {
  return startSketchOn(offsetPlane('XZ', offset = y))
    |> startProfileAt([x, z], %)
    |> xLine(length=usbcSideLength)
    |> tangentialArc({ radius = usbcRadius, offset = 180 }, %)
    |> xLine(length=-usbcSideLength)
    |> tangentialArc({ radius = usbcRadius, offset = 180 }, %)
    |> close()
}

fn usbcBox(x,y,z){
  cutout = usbcHole(x+usbcRadius,y,z+(bodyThickness-usbcDiameter)/2)
  return startSketchOn(offsetPlane('XZ', offset = y))
    |> startProfileAt([x, z], %)
    |> xLine(length=usbcWidth)
    |> yLine(length=bodyThickness)
    |> xLine(length=-usbcWidth)
    |> yLine(length=-bodyThickness)
    |> close()
    |> hole(cutout, %)
    |> extrude(length =-usbCdepth)
}

// center fill
fn centerBodyFill(x, y, z) {
  return startSketchOn(offsetPlane('XY', offset = z))
    |> startProfileAt([x, y], %)
    |> xLine(length=widthWithoutCurve)
    |> yLine(length=-lengthWithoutCurve)
    |> xLine(length=-widthWithoutCurve)
    |> close()
    |> extrude(length = totalThickness)
}

phoneBody = iphoneBody(0, -cornerCurveRadius, edgeCurveHeight)
boxUsbc = usbcBox(edgeToUsbCstart,totalLength,edgeCurveHeight)
center = centerBodyFill(cornerCurveRadius, -cornerCurveRadius, 0)

// -------------- Edge --------------
// Edge curve points from diagram
edgePoints = [
  [0, 0.0],
  [0.07, 1.02],
  [0.58, 1.92],
  [1.47, 2.26],
  [2.41, 2.28]
]

// 0th and every third point are documented points.
// intermediate points are interpolated
// TODO: migrate python midpoint interpolation to KCL
moreEdgePoints = [
  [0, 0.0],
  [0.0, 0.34],
  [0.01, 0.68],
  [0.07, 1.02],
  [0.18, 1.36],
  [0.36, 1.67],
  [0.58, 1.92],
  [0.85, 2.1],
  [1.15, 2.2],
  [1.47, 2.26],
  [1.79, 2.28],
  [2.1, 2.28],
  [2.41, 2.28]
]

fn reversePtsY(xy) {
  return [-xy[0], -xy[1]]
}

fn negativeX(xYpts) {
  return [-xYpts[0], xYpts[1]]
}

fn negativeXList(pts) {
  return map(pts, negativeX)
}

fn identity(pts) {
  return pts
}

fn invert(x) {
  return -x
}

fn xyOffset(xy, x, y) {
  return [xy[0] + x, xy[1] + y]
}

fn edgeBezCurves(pts, offsetFunc) {
  return bezierCurve({
         to = offsetFunc(pts, 0, 3),
         control1 = offsetFunc(pts, 0, 1),
         control2 = offsetFunc(pts, 0, 2)
       }, %)
    |> bezierCurve({
         to = offsetFunc(pts, 3, 6),
         control1 = offsetFunc(pts, 3, 4),
         control2 = offsetFunc(pts, 3, 5)
       }, %)
    |> bezierCurve({
         to = offsetFunc(pts, 6, 9),
         control1 = offsetFunc(pts, 6, 7),
         control2 = offsetFunc(pts, 6, 8)
       }, %)
    |> bezierCurve({
         to = offsetFunc(pts, 9, 12),
         control1 = offsetFunc(pts, 9, 10),
         control2 = offsetFunc(pts, 9, 11)
       }, %)
}

fn edgeCurve(x, y, z, zPointModifierFunc) {
  points = map(  negativeXList(moreEdgePoints), fn(pair) {
    return [pair[0], zPointModifierFunc(pair[1])]
  })
  rad = cornerCurveRadius - edgeCurveWidth
  return startSketchOn(offsetPlane('XZ', offset = y))
    |> startProfileAt([x, z], %)
    |> edgeBezCurves(points, offsetFunc)
    |> xLine(length=-rad)
    |> yLine(length=zPointModifierFunc(-edgeCurveHeight))
    |> close()
}

// Generate a bezier curve segment for a sweep Path
fn generateBezierCurve(pts, offsetFunc, ptIdx) {
  return bezierCurve({
    to = offsetFunc(pts, ptIdx, ptIdx + 3),
    control1 = offsetFunc(pts, ptIdx, ptIdx + 1),
    control2 = offsetFunc(pts, ptIdx, ptIdx + 2)
  }, %)
}

fn offsetPoints(points, x, y) {
  return map(points, fn(point) {
    return [point[0] + x, point[1] + y]
  })
}

fn edgeCornerCurveGenerator(offset) {
  return fn(segment) {
    curvePointModifierFunc = offset.curvePointModifierFunc
    basePoints = curvePointModifierFunc(cornerCurvePoints)
    offsetCurvePoints = offsetPoints(basePoints, offset.x, offset.y)
    sp = xyOffset(    rotatedOffset180Func(    negativeXList(offsetCurvePoints), 0, segment * 3), offset.x, offset.y)
    sweepPath = startSketchOn(offsetPlane('XY', offset = offset.z))
      |> startProfileAt(sp, %)
      |> generateBezierCurve(negativeXList(offsetCurvePoints), rotatedOffset180Func, segment * 3)

    curves = edgeCurve(sp[0], -sp[1], 0 + offset.z, offset.zModifierFunc)
      |> sweep(path = sweepPath)
    return [curves, sweepPath]
  }
}

// /*
firstCornerSolids = map([0, 1, 2, 3, 4, 5], edgeCornerCurveGenerator({
  zModifierFunc = identity,
  curvePointModifierFunc = identity,
  x = 0,
  y = -cornerCurveRadius,
  z = totalThickness - edgeCurveHeight
}))
secondCornerSolids = map([0, 1, 2, 3, 4, 5], edgeCornerCurveGenerator({
  zModifierFunc = identity,
  curvePointModifierFunc = rotatePoints90,
  x = totalWidth - cornerCurveRadius,
  y = 0,
  z = totalThickness - edgeCurveHeight
}))
thirdCornerSolids = map([0, 1, 2, 3, 4, 5], edgeCornerCurveGenerator({
  zModifierFunc = identity,
  curvePointModifierFunc = rotatePoints180,
  x = totalWidth,
  y = -totalLength + cornerCurveRadius,
  z = totalThickness - edgeCurveHeight
}))
fourthCornerSolids = map([0, 1, 2, 3, 4, 5], edgeCornerCurveGenerator({
  zModifierFunc = identity,
  curvePointModifierFunc = rotatePoints270,
  x = cornerCurveRadius,
  y = -totalLength,
  z = totalThickness - edgeCurveHeight
}))

fifthCornerSolids = map([0, 1, 2, 3, 4, 5], edgeCornerCurveGenerator({
  zModifierFunc = invert,
  curvePointModifierFunc = identity,
  x = 0,
  y = -cornerCurveRadius,
  z = edgeCurveHeight
}))
sixthCornerSolids = map([0, 1, 2, 3, 4, 5], edgeCornerCurveGenerator({
  zModifierFunc = invert,
  curvePointModifierFunc = rotatePoints90,
  x = totalWidth - cornerCurveRadius,
  y = 0,
  z = edgeCurveHeight
}))
seventhCornerSolids = map([0, 1, 2, 3, 4, 5], edgeCornerCurveGenerator({
  zModifierFunc = invert,
  curvePointModifierFunc = rotatePoints180,
  x = totalWidth,
  y = -totalLength + cornerCurveRadius,
  z = edgeCurveHeight
}))
eighthCornerSolids = map([0, 1, 2, 3, 4, 5], edgeCornerCurveGenerator({
  zModifierFunc = invert,
  curvePointModifierFunc = rotatePoints270,
  x = cornerCurveRadius,
  y = -totalLength,
  z = edgeCurveHeight
}))

// */


fn edgeLineSketch(edgeArgs) {
  xModifierFunc = edgeArgs.xModifierFunc
  yModifierFunc = edgeArgs.yModifierFunc
  zModifierFunc = edgeArgs.zModifierFunc
  pts = map(moreEdgePoints, fn(xz) {
    return [
      xModifierFunc(xz[0]),
      zModifierFunc(xz[1])
    ]
  })
  return startSketchOn(offsetPlane(edgeArgs.plane, offset = edgeArgs.y))
    |> startProfileAt([edgeArgs.x, edgeArgs.z], %)
    |> edgeBezCurves(pts, offsetFunc)
    |> xLine(length=xModifierFunc(cornerCurveRadius - edgeCurveWidth))
    |> yLine(length=zModifierFunc(-edgeCurveHeight))
    |> close()
    |> extrude(length = edgeArgs.length)
}

upperLeftEdge = edgeLineSketch({
  plane = 'XZ',
  length = lengthWithoutCurve,
  x = 0,
  y = cornerCurveRadius,
  z = totalThickness - edgeCurveHeight,
  xModifierFunc = identity,
  yModifierFunc = identity,
  zModifierFunc = identity,
  xyRotationFunc = identity
})
lowerLeftEdge = edgeLineSketch({
  plane = 'XZ',
  length = lengthWithoutCurve,
  x = 0,
  y = cornerCurveRadius,
  z = edgeCurveHeight,
  xModifierFunc = identity,
  yModifierFunc = identity,
  zModifierFunc = invert,
  xyRotationFunc = identity
})
upperRightEdge = edgeLineSketch({
  plane = 'XZ',
  length = lengthWithoutCurve,
  x = totalWidth,
  y = cornerCurveRadius,
  z = totalThickness - edgeCurveHeight,
  xModifierFunc = invert,
  yModifierFunc = identity,
  zModifierFunc = identity,
  xyRotationFunc = identity
})
lowerRightEdge = edgeLineSketch({
  plane = 'XZ',
  length = lengthWithoutCurve,
  x = totalWidth,
  y = cornerCurveRadius,
  z = edgeCurveHeight,
  xModifierFunc = invert,
  yModifierFunc = identity,
  zModifierFunc = invert,
  xyRotationFunc = identity
})
// for YZ planes, 'x' and 'y' are inverted, as are modifier funcs
upperTopEdge = edgeLineSketch({
  plane = 'YZ',
  length = widthWithoutCurve,
  x = 0,
  y = cornerCurveRadius,
  z = totalThickness - edgeCurveHeight,
  xModifierFunc = invert,
  yModifierFunc = identity,
  zModifierFunc = identity,
  xyRotationFunc = identity
})
lowerTopEdge = edgeLineSketch({
  plane = 'YZ',
  length = widthWithoutCurve,
  x = 0,
  y = cornerCurveRadius,
  z = edgeCurveHeight,
  xModifierFunc = invert,
  yModifierFunc = identity,
  zModifierFunc = invert,
  xyRotationFunc = identity
})
upperBottomEdge = edgeLineSketch({
  plane = 'YZ',
  length = widthWithoutCurve,
  x = -totalLength,
  y = cornerCurveRadius,
  z = totalThickness - edgeCurveHeight,
  xModifierFunc = identity,
  yModifierFunc = identity,
  zModifierFunc = identity,
  xyRotationFunc = identity
})
lowerBottomEdge = edgeLineSketch({
  plane = 'YZ',
  length = widthWithoutCurve,
  x = -totalLength,
  y = cornerCurveRadius,
  z = edgeCurveHeight,
  xModifierFunc = identity,
  yModifierFunc = identity,
  zModifierFunc = invert,
  xyRotationFunc = identity
})

// LENS
cameraEdgeOffset = 1.04

cameraBaseRadius = 14.17 - cameraEdgeOffset
cameraBaseWidth = 45.22 - cameraEdgeOffset
cameraBaseWidthWithoutCurves = cameraBaseWidth - (2 * cameraBaseRadius)
cameraBaseLength = 46.45 - cameraEdgeOffset
cameraBaseLengthWithoutCurves = cameraBaseLength - (2 * cameraBaseRadius)
cameraPlateauOffset = 4.70

cameraPlateauWidth = 41.56 - cameraPlateauOffset
cameraPlateauWidthWithoutCurves = cameraPlateauWidth - (2 * cameraBaseRadius)
cameraPlateauLength = 42.88 - cameraPlateauOffset
cameraPlateauLengthWithoutCurves = cameraPlateauLength - (2 * cameraBaseRadius)
cameraPlateauThickness = 2.05

cameraThickness = 4.28 - cameraPlateauThickness
camera1HeightOffset = 14.17

camera1WidthOffset = 14.17
camera2HeightOffset = 33.41
camera2WidthOffset = 14.17
camera3HeightOffset = 23.79
camera3WidthOffset = 32.16
cameraLensDiameter = 16.02

cameraLensRadius = cameraLensDiameter / 2
fn cameraBody(x, y, z) {
  cameraBase = startSketchOn(offsetPlane('XY', offset = z))
    |> startProfileAt([
         x + cameraEdgeOffset,
         y + cornerCurveRadius - cameraBaseRadius - cameraEdgeOffset
       ], %)
    |> yLine(length=-cameraBaseLengthWithoutCurves, tag=$cameraEdge1)
    |> tangentialArc({
         radius = cameraBaseRadius,
         offset = 90
       }, %)
    |> xLine(length=cameraBaseWidthWithoutCurves, tag=$cameraEdge2)
    |> tangentialArc({
         radius = cameraBaseRadius,
         offset = 90
       }, %)
    |> yLine(length=cameraBaseLengthWithoutCurves, tag=$cameraEdge3)
    |> tangentialArc({
         radius = cameraBaseRadius,
         offset = 90
       }, %)
    |> xLine(length=-cameraBaseWidthWithoutCurves, tag=$cameraEdge4)
    |> tangentialArc({
         radius = cameraBaseRadius,
         offset = 90
       }, %)
    |> close()

  // height/width/length difference picked manually, measurements not provided
  plateauCurveMidSketchHeight = cameraPlateauThickness * .15
  plateauCurveMidSketchWidth = cameraPlateauWidth + (cameraBaseWidth - cameraPlateauWidth) / 2 - (2 * cameraBaseRadius)
  plateauCurveMidSketchLength = cameraPlateauLength + (cameraBaseLength - cameraPlateauLength) / 2 - (2 * cameraBaseRadius)

  midPlateauCurveXOffset = cameraPlateauOffset - ((cameraBaseWidth - cameraPlateauWidth) / 4)

  cameraPlateau0 = startSketchOn(offsetPlane('XY', offset = z + plateauCurveMidSketchHeight))
    |> startProfileAt([
         x + midPlateauCurveXOffset,
         y + cornerCurveRadius - cameraBaseRadius - midPlateauCurveXOffset
       ], %)
    |> yLine(length=-plateauCurveMidSketchLength)
    |> tangentialArc({
         radius = cameraBaseRadius,
         offset = 90
       }, %)
    |> xLine(length=plateauCurveMidSketchWidth)
    |> tangentialArc({
         radius = cameraBaseRadius,
         offset = 90
       }, %)
    |> yLine(length=plateauCurveMidSketchLength)
    |> tangentialArc({
         radius = cameraBaseRadius,
         offset = 90
       }, %)
    |> xLine(length=-plateauCurveMidSketchWidth)
    |> tangentialArc({
         radius = cameraBaseRadius,
         offset = 90
       }, %)
    |> close()

  cameraPlateau = startSketchOn(offsetPlane('XY', offset = z + cameraPlateauThickness))
    |> startProfileAt([
         x + cameraPlateauOffset,
         y + cornerCurveRadius - cameraBaseRadius - cameraPlateauOffset
       ], %)
    |> yLine(length=-cameraPlateauLengthWithoutCurves)
    |> tangentialArc({
         radius = cameraBaseRadius,
         offset = 90
       }, %)
    |> xLine(length=cameraPlateauWidthWithoutCurves)
    |> tangentialArc({
         radius = cameraBaseRadius,
         offset = 90
       }, %)
    |> yLine(length=cameraPlateauLengthWithoutCurves)
    |> tangentialArc({
         radius = cameraBaseRadius,
         offset = 90
       }, %)
    |> xLine(length=-cameraPlateauWidthWithoutCurves)
    |> tangentialArc({
         radius = cameraBaseRadius,
         offset = 90
       }, %)
    |> close()

  lofted = loft([
    cameraBase,
    cameraPlateau0,
    cameraPlateau
  ])
  return lofted
}

fn lenses(x, y, z) {
  return startSketchOn(offsetPlane('XY', offset = z))
    |> circle(
         center = [x, y],
         radius = cameraLensRadius
       )
    |> extrude(%, length = cameraThickness)
}

buttonDepth = 0.45

// /*
cameraBase = cameraBody(0, -cornerCurveRadius, totalThickness)
cameraLens1 = lenses(camera1WidthOffset, -camera1HeightOffset, totalThickness + cameraPlateauThickness)
cameraLens2 = lenses(camera2WidthOffset, -camera2HeightOffset, totalThickness + cameraPlateauThickness)
cameraLens3 = lenses(camera3WidthOffset, -camera3HeightOffset, totalThickness + cameraPlateauThickness)
// */


// Buttons


buttonWidth = 2.66
buttonRadius = buttonWidth / 2
powerButtonLengthWithoutCurves = 8.85 * 2 - (buttonRadius * 2)

powerButtonDistanceFromTop = 55.33 - 8.85
actionButtonLengthWithoutCurves = 3.45 * 2 - (buttonRadius * 2)

actionButtonDistanceFromTop = 34.08 - 3.45
volumeButtonLengthWithoutCurves = 5.60 * 2 - (buttonRadius * 2)

volumeUpButtonDistanceFromTop = 48.23 - 5.60
volumeDownButtonDistanceFromTop = 62.43 - 5.60
fn buttonSketch(x, y, z, depth, buttonLength) {
  squareSketch = startSketchOn(offsetPlane('YZ', offset = z))
    |> startProfileAt([x, y], %)
    |> xLine(length=-buttonLength)
    |> tangentialArc({ radius = buttonRadius, offset = 180 }, %)
    |> xLine(length=buttonLength)
    |> tangentialArc({ radius = buttonRadius, offset = 180 }, %)
    |> close()
    |> extrude(%, length = depth)
  return squareSketch
}

buttonHeightOffset = totalThickness / 2 + buttonRadius

fn extendArray(orig, extension) {
  return reduce(extension, orig, fn(element, accumulator) {
    return push(accumulator, element)
  })
}

// /*
powerButton = buttonSketch(-powerButtonDistanceFromTop - buttonRadius, buttonHeightOffset, 0, -buttonDepth, powerButtonLengthWithoutCurves)
actionButton = buttonSketch(-actionButtonDistanceFromTop - buttonRadius, buttonHeightOffset, totalWidth, buttonDepth, actionButtonLengthWithoutCurves)
volumeUp = buttonSketch(-volumeUpButtonDistanceFromTop - buttonRadius, buttonHeightOffset, totalWidth, buttonDepth, volumeButtonLengthWithoutCurves)
volumeDown = buttonSketch(-volumeDownButtonDistanceFromTop - buttonRadius, buttonHeightOffset, totalWidth, buttonDepth, volumeButtonLengthWithoutCurves)
// */


/* // All solids are translatable/rotatable together
// except for sweep paths on corner curves

fn mergeArrays(arrays) {
  return reduce(arrays, [], fn(arr, result) {
    return extendArray(result, arr)
  })
}

fn translator(translateArgs) {
  x = translateArgs.x
  y = translateArgs.y
  z = translateArgs.z
  roll = translateArgs.roll
  pitch = translateArgs.pitch
  yaw = translateArgs.yaw
  return fn(solid) {
    return solid
      |> rotate(roll = roll, pitch = pitch, yaw = yaw)
      |> translate(translate = [x, y, z])
  }
}

translationArgs = {
  x = -totalWidth,
  y = totalLength,
  z = 0,
  roll = -45,
  pitch = 180,
  yaw = 0
}

bodySolids = [phoneBody, center]
map(bodySolids, translator(translationArgs))

cornerSolids = mergeArrays([
  mergeArrays(firstCornerSolids),
  mergeArrays(secondCornerSolids),
  mergeArrays(thirdCornerSolids),
  mergeArrays(fourthCornerSolids),
  mergeArrays(fifthCornerSolids),
  mergeArrays(sixthCornerSolids),
  mergeArrays(seventhCornerSolids),
  mergeArrays(eighthCornerSolids)
])
map(cornerSolids, translator(translationArgs))

edgeSolids = [
  upperLeftEdge,
  upperRightEdge,
  upperTopEdge,
  upperBottomEdge,
  lowerTopEdge,
  lowerBottomEdge,
  lowerLeftEdge,
  lowerRightEdge
]
map(edgeSolids, translator(translationArgs))

cameraSolids = [
  cameraBase,
  cameraLens1,
  cameraLens2,
  cameraLens3
]
map(cameraSolids, translator(translationArgs))

buttonSolids = [
  powerButton,
  actionButton,
  volumeUp,
  volumeDown
]
map(buttonSolids, translator(translationArgs)) */
